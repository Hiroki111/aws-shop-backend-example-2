service: product-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    ENV_STAGE: ${opt:stage, 'dev'}
    PGHOST: ${self:custom.dotenvVars.PGHOST, env:PGHOST, ''}
    PGUSER: ${self:custom.dotenvVars.PGUSER, env:PGUSER, ''}
    PGDATABASE: ${self:custom.dotenvVars.PGDATABASE, env:PGDATABASE, ''}
    PGPASSWORD: ${self:custom.dotenvVars.PGPASSWORD, env:PGPASSWORD, ''}
    PGPORT: ${self:custom.dotenvVars.PGPORT, env:PGPORT, ''}

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline
  - serverless-stage-manager
  - serverless-prune-plugin
  - serverless-iam-roles-per-function

custom:
  autoswagger:
    title: "AWS Course EPAM - Online Shop"
    typefiles: ["./src/models/products.ts"]
    useStage: true
    host: "lfh6re2wfg.execute-api.eu-west-1.amazonaws.com/dev"
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules: true
    dotenvVars: ${file(configs.js)}
  stages:
    - dev
    - staging
    - prod
  prune:
    automatic: true
    number: 1

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
          responses:
            200:
              description: "Get Product Success"
              bodyType: "ProductWithCount"
            400:
              description: "Product not found"
            500:
              description: "Internal Server Error"
  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
          responses:
            200:
              description: "Get Products Success"
              bodyType: "ProductsWithCount"
            500:
              description: "Internal Server Error"
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          bodyType: "CreateProduct"
          request:
            schema:
              application/json: ${file(src/functions/createProduct/createProductSchema.json)}
          responses:
            200:
              description: "Product created"
            400:
              description: "Product could not be created"
            500:
              description: "Internal Server Error"
